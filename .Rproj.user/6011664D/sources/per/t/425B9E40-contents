library(sf)
library(tidyverse)
library(visdat)
library(tigris)
library(dplyr)
library(mapview)

# Consolidation -----------------------------------------------------------
# Read in Thursday 2019 trips
th <- st_read("Shapefiles/Raw_2019_Trips/district_of_columbia_network_volumes.shp")
# get just the sidewalks and save as an object
sidewalks <- th %>%
  filter(lanes == 0)
# get just the roads and save as an object
roads <- th %>%
  filter(lanes != 0)
# get the directions and make a character vector for a for loop
directions <- roads %>%
  distinct(direction) %>%
  pull()
# create an empty container for the data to be stored in the for loop
roads_cleaned <- c()
for(i in directions){
  # create a temporary object based on the direction
  temp_sidewalks <- sidewalks %>%
    filter(direction == i) %>%
    mutate(fid = row_number()) # create an index row for future joining
  # create a version without geometries for the join
  temp_sidewalks_nonst <- temp_sidewalks %>%
    st_drop_geometry()
  # create a temporary roads object based on direction
  temp_roads <- roads %>%
    filter(direction == i)
  # create a new column that has the nearest sidewalk
  roads_fixed <- temp_roads %>%
    mutate(nearest_sidewalk = st_nearest_feature(temp_roads, temp_sidewalks))
  # create a new column based on the distance
  roads_fixed$dist <- st_distance(temp_roads, st_geometry(temp_sidewalks)[roads_fixed$nearest_sidewalk], by_element = TRUE)
  # if the nearest sidewalk is more than 50 meters away, remove it from the data
  roads_fixed <- roads_fixed %>%
    mutate(nearest_sidewalk = ifelse(dist < units::set_units(51, "meters"), nearest_sidewalk, 0)) %>%
    select(-dist) %>%
    # join it on the index of the sidewalk
    left_join(., temp_sidewalks_nonst, by = c("nearest_sidewalk" = "fid"),  suffix = c("", "_sidewalks"))
  # write to the container
  roads_cleaned <- rbind(roads_cleaned, roads_fixed)
}
# replace any NAs with 0s for the calculation
roads_cleaned[is.na(roads_cleaned)] <- 0
# create new fields that add the sidewalk and road totals together
roads_cleaned %>%
  transmute(stableEdge,
            priv_auto = trips_Priv + trips_Priv_sidewalks,
            on_demand = trips_On_D + trips_On_D_sidewalks,
            carpool = trips_Carp + trips_Carp_sidewalks,
            walking = trips_Walk + trips_Walk_sidewalks,
            biking = trips_Biki + trips_Biki_sidewalks,
            total = total_trip + total_trip_sidewalks,
            direction, streetName) %>%
  st_write("Shapefiles/Consolidated_2019_Trips/2019_Thurs_Consolidated_withnames.shp", delete_layer = TRUE)


# Read in Thursday 2022 trips
th <- st_read("Shapefiles/Raw_2022_Trips/district_of_columbia_network_volumes.shp")
# get just the sidewalks and save as an object
sidewalks <- th %>%
  filter(lanes == 0)
# get just the roads and save as an object
roads <- th %>%
  filter(lanes != 0)
# get the directions and make a character vector for a for loop
directions <- roads %>%
  distinct(direction) %>%
  pull()
# create an empty container for the data to be stored in the for loop
roads_cleaned <- c()
for(i in directions){
  # create a temporary object based on the direction
  temp_sidewalks <- sidewalks %>%
    filter(direction == i) %>%
    mutate(fid = row_number()) # create an index row for future joining
  # create a version without geometries for the join
  temp_sidewalks_nonst <- temp_sidewalks %>%
    st_drop_geometry()
  # create a temporary roads object based on direction
  temp_roads <- roads %>%
    filter(direction == i)
  # create a new column that has the nearest sidewalk
  roads_fixed <- temp_roads %>%
    mutate(nearest_sidewalk = st_nearest_feature(temp_roads, temp_sidewalks))
  # create a new column based on the distance
  roads_fixed$dist <- st_distance(temp_roads, st_geometry(temp_sidewalks)[roads_fixed$nearest_sidewalk], by_element = TRUE)
  # if the nearest sidewalk is more than 50 meters away, remove it from the data
  roads_fixed <- roads_fixed %>%
    mutate(nearest_sidewalk = ifelse(dist < units::set_units(51, "meters"), nearest_sidewalk, 0)) %>%
    select(-dist) %>%
    # join it on the index of the sidewalk
    left_join(., temp_sidewalks_nonst, by = c("nearest_sidewalk" = "fid"),  suffix = c("", "_sidewalks"))
  # write to the container
  roads_cleaned <- rbind(roads_cleaned, roads_fixed)
}
# replace any NAs with 0s for the calculation
roads_cleaned[is.na(roads_cleaned)] <- 0
# create new fields that add the sidewalk and road totals together
roads_cleaned %>%
  transmute(stableEdge,
            priv_auto = trips_Priv + trips_Priv_sidewalks,
            on_demand = trips_On_D + trips_On_D_sidewalks,
            carpool = trips_Carp + trips_Carp_sidewalks,
            walking = trips_Walk + trips_Walk_sidewalks,
            biking = trips_Biki + trips_Biki_sidewalks,
            total = total_trip + total_trip_sidewalks,
            direction, streetName) %>%
  st_write("Shapefiles/Consolidated_2022_Trips/2022_Thurs_Consolidated.shp", delete_layer = TRUE)

# Full consolidated data clipped and cleaned in ArcGIS Pro
# Filtering and cleaning data ---------------------------------------------
#Read 2019 data and remove all segments with NA or 0 as street name.
st_read("Shapefiles/Consolidated_2019_Trips/Clipped_Consolidated_2019/Final_2019_Data.shp") %>%
  filter(!is.na(streetName) & streetName != 0) %>%
  st_write("Output/Final_2019.shp", delete_layer = TRUE)

#Read 2022 data and remove all segments with NA or 0 as street name.
st_read("Shapefiles/Consolidated_2022_Trips/Clipped_Consolidated_2022/Final_2022_Data.shp") %>%
  filter(!is.na(streetName) & streetName != 0) %>%
  st_write("Output/Final_2022.shp", delete_layer = TRUE)

#Bind into a finalized dataset and add yearbinary and treatment
final19 <- st_read("Output/Final_2019.shp") %>%
  select(!"Shape_Leng")
final22 <- st_read("Output/Final_2022.shp")
final_all_data <- rbind(final19, final22)
final_all_data <- final_all_data %>%
  mutate(yearbinary = ifelse(Year==2019, 0, 1), treatment = ifelse(Type=="Controls", 0, ifelse(Type=="Study Corridor", 1, 2)))

#Test on map
final_all_data %>%
  mapview(zcol="treatment")

final_all_data %>%
  st_write("Output/Final_Data.shp")

#Identifying mean biking statistics in study corridor in the before period
final_all_data %>%
  filter(treatment == 1 & yearbinary==0) %>%
  st_drop_geometry() %>%
  summarize(mean(biking), mean(total), mean(biking/total))


#Crash Analysis: Consolidating crash data to trip data ----------------------------------------------------------

#Controls 2019
# read in crash data for 2019
crashes_before_controls <- st_read("Shapefiles/Crashes_in_DC/Controls_19to20.shp")

# filter to controls 2019 and add an index number to join backwards later
temp_controls_19 <- final_all_data %>%
  filter(treatment == 0, yearbinary == 0) %>%
  group_by(streetName) %>%
  summarize(trips=mean(total), auto=mean(priv_auto+carpool+on_demand), biking=mean(biking), walking=mean(walking)) %>%
  mutate(fid=row_number())

# remove the spatial data so that it's faster to join
crashes_before_controls_nonst <- crashes_before_controls %>%
  st_drop_geometry()

# create new columns that count up the people involved and fatalities
summary <- crashes_before_controls %>%
  mutate(bikes = TOTAL_BICY, peds = TOTAL_PEDE, vehicles = TOTAL_VEHI, 
         bike_fatalities = FATAL_BICY, peds_fatalities = FATAL_PEDE, 
         all_fatalities = FATAL_BICY + FATAL_DRIV + FATAL_PEDE + FATALPASSE,
         
         # calculate the ID of the nearest road
         nearest_road_fid = st_nearest_feature(crashes_before_controls, temp_controls_19)) %>%
  
  # drop the geometry so that the rest runs faster
  st_drop_geometry() %>%
  group_by(nearest_road_fid) %>%
  summarize(crashes = n(),
            bikes = sum(bikes),
            peds = sum(peds),
            vehicles = sum(vehicles),
            bike_fatalities = sum(bike_fatalities),
            peds_fatalities = sum(peds_fatalities), 
            all_fatalities = sum(all_fatalities)) 

# join the crashes to the road segments
before_controls_crashes <- temp_controls_19 %>%
  left_join(., summary, by = c("fid" = "nearest_road_fid")) %>%
  mutate(treatment = 0, period = 0)

 
#Controls 2022
# read in crash data for 2022
crashes_after_controls <- st_read("Shapefiles/Crashes_in_DC/Controls_21to23.shp")

# filter to controls 2022 and add an index number to join backwards later
temp_controls_22 <- final_all_data %>%
  filter(treatment == 0, yearbinary == 1) %>%
  group_by(streetName) %>%
  summarize(trips=mean(total), auto=mean(priv_auto+carpool+on_demand), biking=mean(biking), walking=mean(walking)) %>%
  mutate(fid=row_number())

# remove the spatial data so that it's faster to join
crashes_after_controls_nonst <- crashes_after_controls %>%
  st_drop_geometry()

# create new columns that count up the people involved and fatalities
summary <- crashes_after_controls %>%
  mutate(bikes = TOTAL_BICY, peds = TOTAL_PEDE, vehicles = TOTAL_VEHI, 
         bike_fatalities = FATAL_BICY, peds_fatalities = FATAL_PEDE, 
         all_fatalities = FATAL_BICY + FATAL_DRIV + FATAL_PEDE + FATALPASSE,
         
         # calculate the ID of the nearest road
         nearest_road_fid = st_nearest_feature(crashes_after_controls, temp_controls_22)) %>%
  
  # drop the geometry so that the rest runs faster
  st_drop_geometry() %>%
  group_by(nearest_road_fid) %>%
  summarize(crashes = n(),
            bikes = sum(bikes),
            peds = sum(peds),
            vehicles = sum(vehicles),
            bike_fatalities = sum(bike_fatalities),
            peds_fatalities = sum(peds_fatalities), 
            all_fatalities = sum(all_fatalities)) 

# join the crashes to the road segments
after_controls_crashes <- temp_controls_22 %>%
  left_join(., summary, by = c("fid" = "nearest_road_fid")) %>%
  mutate(treatment = 0, period = 1)

#Study Corridor 2019
# read in crash data for 2019
crashes_before_corridor <- st_read("Shapefiles/Crashes_in_DC/StudyCorridor_19to20.shp")

# filter to corridors 2019 and add an index number to join backwards later
temp_corridor_19 <- final_all_data %>%
  filter(treatment == 1, yearbinary == 0) %>%
  group_by(streetName) %>%
  summarize(trips=mean(total), auto=mean(priv_auto+carpool+on_demand), biking=mean(biking), walking=mean(walking)) %>%
  mutate(fid=row_number())

# remove the spatial data so that it's faster to join
crashes_before_corridor_nonst <- crashes_before_corridor %>%
  st_drop_geometry()

# create new columns that count up the people involved and fatalities
summary <- crashes_before_corridor %>%
  mutate(bikes = TOTAL_BICY, peds = TOTAL_PEDE, vehicles = TOTAL_VEHI, 
         bike_fatalities = FATAL_BICY, peds_fatalities = FATAL_PEDE, 
         all_fatalities = FATAL_BICY + FATAL_DRIV + FATAL_PEDE + FATALPASSE,
         
         # calculate the ID of the nearest road
         nearest_road_fid = st_nearest_feature(crashes_before_corridor, temp_corridor_19)) %>%
  
  # drop the geometry so that the rest runs faster
  st_drop_geometry() %>%
  group_by(nearest_road_fid) %>%
  summarize(crashes = n(),
            bikes = sum(bikes),
            peds = sum(peds),
            vehicles = sum(vehicles),
            bike_fatalities = sum(bike_fatalities),
            peds_fatalities = sum(peds_fatalities), 
            all_fatalities = sum(all_fatalities)) 

# join the crashes to the road segments
before_corridor_crashes <- temp_corridor_19 %>%
  left_join(., summary, by = c("fid" = "nearest_road_fid")) %>%
  mutate(treatment = 1, period = 0)

#Study Corridor 2022
# read in crash data for 2022
crashes_after_corridor <- st_read("Shapefiles/Crashes_in_DC/StudyCorridor_21to23.shp")

# filter to corridors 2022 and add an index number to join backwards later
temp_corridor_22 <- final_all_data %>%
  filter(treatment == 1, yearbinary == 1) %>%
  group_by(streetName) %>%
  summarize(trips=mean(total), auto=mean(priv_auto+carpool+on_demand), biking=mean(biking), walking=mean(walking)) %>%
  mutate(fid=row_number())

# remove the spatial data so that it's faster to join
crashes_after_corridor_nonst <- crashes_after_corridor %>%
  st_drop_geometry()

# create new columns that count up the people involved and fatalities
summary <- crashes_after_corridor %>%
  mutate(bikes = TOTAL_BICY, peds = TOTAL_PEDE, vehicles = TOTAL_VEHI, 
         bike_fatalities = FATAL_BICY, peds_fatalities = FATAL_PEDE, 
         all_fatalities = FATAL_BICY + FATAL_DRIV + FATAL_PEDE + FATALPASSE,
         
         # calculate the ID of the nearest road
         nearest_road_fid = st_nearest_feature(crashes_after_corridor, temp_corridor_22)) %>%
  
  # drop the geometry so that the rest runs faster
  st_drop_geometry() %>%
  group_by(nearest_road_fid) %>%
  summarize(crashes = n(),
            bikes = sum(bikes),
            peds = sum(peds),
            vehicles = sum(vehicles),
            bike_fatalities = sum(bike_fatalities),
            peds_fatalities = sum(peds_fatalities), 
            all_fatalities = sum(all_fatalities)) 

# join the crashes to the road segments
after_corridor_crashes <- temp_corridor_22 %>%
  left_join(., summary, by = c("fid" = "nearest_road_fid")) %>%
  mutate(treatment = 1, period = 1)


# Crash Analysis: Merging and cleaning  data -----------------------------------
#Merge the joined crash data into one dataset.
all_crash <- rbind(before_controls_crashes, after_controls_crashes, before_corridor_crashes, after_corridor_crashes)
#Replace NAs with 0s
all_crash[is.na(all_crash)] <- 0
#Calculate crashes and fatalities per trip by mode. Replace NaN with NA.
all_crash <- all_crash %>%
  mutate(bikecrashes_per_trip  = ifelse(biking >0, bikes/biking, NA), pedcrashes_per_trip = ifelse(walking>0, peds/walking, NA), autocrashes_per_trip = ifelse(auto>0, vehicles/auto, NA), totalcrashes_per_trip = ifelse(trips>0, crashes/trips, NA)) %>%
  mutate(bikefat_per_trip = ifelse(biking >0, bike_fatalities/biking, NA),  pedfat_per_trip = ifelse(walking>0,  peds_fatalities/walking, NA), fatalities_per_trip=ifelse(trips>0, all_fatalities/trips, NA))
all_crash %>%
  mapview()

all_crash %>% 
  st_write("Output/Crash_Tableau.shp") 
all_crash %>%
  mapview()

#Check of overall results
all_crash %>%
  group_by(treatment, period) %>%
  summarize(sum(crashes), sum(bikes), mean(bikecrashes_per_trip, na.rm=TRUE))
